=== File: ./uninstall.php ===


<?php
/**
 * Renderer Class for H2 Product Insight
 *
 * @package    H2_Product_Insight
 * @author     Young Kwon
 * @copyright  Copyright (C) 2024, Young Kwon
 * @license    GPL-2.0-or-later
 * @link       https://2human.ai
 * @file       uninstall.php
 */

 // If uninstall not called from WordPress, then exit
if (!defined('WP_UNINSTALL_PLUGIN')) {
    exit;
}

// Delete plugin options
delete_option('h2_product_insight_options');
delete_option('h2_product_insight_invalid_fields');

// Clean up any additional options and custom tables if necessary
=== End of ./uninstall.php ===

=== File: ./h2-product-insight.php ===

<?php
/**
 * Plugin Name: H2 Product Insight
 * Plugin URI: https://2human.ai/product-insight/
 * Description: AI-powered Product Insight for WooCommerce products. Adds an intelligent chatbot that helps customers understand your products better.
 * Version: 1.4
 * Requires at least: 5.0
 * Requires PHP: 7.2
 * Author: Young Kwon
 * Author URI: https://2human.ai
 * License: GPL v2 or later
 * License URI: https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain: h2-product-insight
 * Domain Path: /languages
 * WC requires at least: 3.0
 * WC tested up to: 6.0
 *
 * @package H2_Product_Insight
 * @file h2-product-insight.php
 */

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

require_once plugin_dir_path(__FILE__) . 'includes/constants.php';

// Check if WooCommerce is active
if (!in_array('woocommerce/woocommerce.php', apply_filters('active_plugins', get_option('active_plugins')))) {
    return;
}

// Include the main plugin class
require_once plugin_dir_path(__FILE__) . 'includes/class-h2-product-insight.php';
require_once plugin_dir_path(__FILE__) . 'includes/class-h2-product-insight-sanitizer.php';

// Initialize the plugin
function h2_product_insight_init() {
    load_plugin_textdomain('h2-product-insight', false, dirname(plugin_basename(__FILE__)) . '/languages/');
    new H2_Product_Insight();
}
add_action('plugins_loaded', 'h2_product_insight_init');

// Add a "Settings" link to the plugin action links
add_filter('plugin_action_links_' . plugin_basename(__FILE__), 'h2_product_insight_plugin_action_links');

function h2_product_insight_plugin_action_links($links) {
    $settings_url = admin_url('options-general.php?page=h2_product_insight');
    $settings_link = sprintf(
        '<a href="%s">%s</a>',
        esc_url($settings_url),
        H2_Product_Insight_Escaper::escape_translation('Settings')
    );
    array_unshift($links, $settings_link);
    return $links;
}
=== End of ./h2-product-insight.php ===

=== File: ./js/h2-product-insight-script.js ===

/**
 * H2 Product Insight - Product Insight AI for WooCommerce
 *
 * @package    H2_Product_Insight
 * @autor      Young Kwon
 * @copyright  Copyright (C) 2024, Young Kwon
 * @license    GPL-2.0-or-later
 * @link       https://2human.ai
 * @file       js/h2-product-insight-script.js
 */

jQuery(document).ready(function($) {
    // // Check if we're on a product page
    // if (!$('body').hasClass('single-product')) {
    //     console.log('skip - no single product.')
    //     return;
    // }

    const lastReplyContainer = $('#product-insight-ailast-reply-container');
    const inputContainer = $('#product-insight-aiinput');
    let userInput = $('#product-insight-aiuser-input');
    let initialResponse = null;
    let initialCallMade = false;

    function addMessage(message, isAI = false) {
        if (isAI) {
            lastReplyContainer.html('<div class="ai-message">' + message + '</div>');
            lastReplyContainer.show();
        }
    }

    function showProgressBar() {
        console.log('showProgressBar called');
        inputContainer.html('<div class="progress-bar"><div class="progress"></div></div>');
    }

    function hideProgressBar() {
        console.log('hideProgressBar called');
        inputContainer.html('<input type="text" id="product-insight-aiuser-input" placeholder="Ask about the product...">');
        userInput = $('#product-insight-aiuser-input'); // Reassign the userInput variable
        attachInputListeners(); // Reattach event listeners
        userInput.focus(); // Add this line to maintain focus
    }

    function makeInitialCall() {
        console.log('makeInitialCall called');
        showProgressBar();
        $.ajax({
            url: h2_product_insight_ajax.ajax_url,
            type: 'POST',
            data: {
                action: 'h2_product_insight_initial_call',
                nonce: h2_product_insight_ajax.nonce,  // Add this line
                subscription_external_id: h2_product_insight_ajax.api_key,
                timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                product_id: h2_product_insight_ajax.product_id,
                caller_domain: window.location.hostname // Add this line
            },
            success: function(response) {
                hideProgressBar();
                if (response.success) {
                    initialResponse = response.data.data;
                    console.log('Initial call successful:', initialResponse);
                    initialCallMade = true;
                } else {
                    console.error('Initial call failed:', response.data);
                    addMessage('Error initializing chat. Please try again later.', true);
                }
            },
            error: function(xhr, status, error) {
                hideProgressBar();
                console.error('Error making initial call:', error);
                addMessage('Error initializing chat. Please try again later.', true);
            }
        });
    }

    function sendMessage() {
        const message = userInput.val().trim();
        if (message === '') return;

        userInput.val('');
        showProgressBar();

        if (initialResponse === null) {
            addMessage('Please wait, initializing chat...', true);
            let checkInitialResponse = setInterval(function() {
                if (initialResponse !== null) {
                    clearInterval(checkInitialResponse);
                    proceedWithMessage(message);
                }
            }, 100);
        } else {
            proceedWithMessage(message);
        }
    }

    function proceedWithMessage(message) {
        // Sanitize message before sending
        message = message.replace(/[<>]/g, '').trim().substring(0, 1000);
        
        $.ajax({
            url: h2_product_insight_ajax.ajax_url,
            type: 'POST',
            data: {
                action: 'send_product_insight_message',
                nonce: h2_product_insight_ajax.nonce,  // Add this line
                message: message,
                data: initialResponse
            },
            success: function(response) {
                hideProgressBar();
                if (response.success) {
                    initialResponse = response.data.data;
                    addMessage(initialResponse.message, true);
                } else {
                    addMessage('Error: ' + response.data, true);
                }
            },
            error: function() {
                hideProgressBar();
                addMessage('Error communicating with the server', true);
            }
        });
    }

    function attachInputListeners() {
        console.log('attachInputListeners called');
        userInput.on('keypress', function(e) {
            if (e.which === 13) {
                sendMessage();
            }
        });

        userInput.one('focus', function() {
            if (!initialCallMade) {
                console.log('Input field focused. Making initial AI call.');
                makeInitialCall();
            }
        });
    }

    hideProgressBar();
});
=== End of ./js/h2-product-insight-script.js ===

=== File: ./js/activation.js ===

/**
 * H2 Product Insight - Admin Activation Script
 *
 * @package    H2_Product_Insight
 * @author     Young Kwon
 * @copyright  Copyright (C) 2024, Young Kwon
 * @license    GPL-2.0-or-later
 * @link       https://2human.ai
 * @file       js/activation.js
 */

jQuery(document).ready(function($) {
    $('#h2_activate_button').on('click', function(e) {
        e.preventDefault();
        
        var $button = $(this);
        var $message = $('#h2_activation_message');
        var $spinner = $button.find('.spinner');
        
        $button.prop('disabled', true);
        $spinner.show();
        $message.html('Activating...').show().removeClass('updated error');
        
        $.ajax({
            url: h2_product_insight.ajax_url,
            type: 'POST',
            data: {
                action: 'h2_activate_product_insight',
                nonce: h2_product_insight.nonce  // This matches the 'nonce' field now
            },            
            success: function(response) {
                if (response.success) {
                    $message.html(response.data.message).addClass('updated');
                    // Reload the page after successful activation
                    setTimeout(function() {
                        window.location.reload();
                    }, 1500);
                } else {
                    $message.html('Error: ' + response.data.message).addClass('error');
                    $button.prop('disabled', false);
                    $spinner.hide();
                }
            },
            error: function(xhr, status, error) {
                $message.html('Connection error: ' + error).addClass('error');
                $button.prop('disabled', false);
                $spinner.hide();
            }
        });
    });
});
=== End of ./js/activation.js ===

=== File: ./includes/class-h2-product-insight-sanitizer.php ===

<?php
/**
 * Sanitization Utility Class for H2 Product Insight
 *
 *
 * @package    H2_Product_Insight
 * @subpackage Classes
 * @File       class-h2-product-insight-sanitizer.php
 */

if (!defined('ABSPATH')) {
    exit;
}

class H2_Product_Insight_Sanitizer {

    public static function sanitize_custom_css( $css ) {
        if ( empty( $css ) ) {
            return '';
        }

        // Step 1: Sanitize textarea input
        $css = sanitize_textarea_field( $css );

        // Step 2: Remove potentially dangerous CSS functions and imports
        $css = preg_replace( '/(expression|javascript|vbscript|@import|behavior)\s*:/i', '', $css );

        // Step 3: Remove URLs with dangerous protocols
        $css = preg_replace_callback( '/url\s*\(\s*([^\)]+)\s*\)/i', function( $matches ) {
            $url = trim( $matches[1], '"\'' );

            if ( preg_match( '/^(https?:|data:image\/)/i', $url ) ) {
                return 'url("' . esc_url_raw( $url ) . '")';
            }

            return 'url("")';
        }, $css );

        // Step 4: Limit the length
        $css = substr( $css, 0, H2_PRODUCT_INSIGHT_MAX_QUERY_LENGTH );

        // Step 5: Trim whitespace
        $css = trim( $css );

        return $css;
    }

    /**
     * Sanitizes AI response data.
     *
     * @param array $data The AI response data to sanitize.
     * @return array Sanitized data.
     */
    public static function sanitize_ai_response($response_json) {
        // If already an array/object, don't decode
        $response = is_string($response_json) ? json_decode($response_json, true) : $response_json;
        
        if (json_last_error() !== JSON_ERROR_NONE && is_string($response_json)) {
            return null;
        }
        
        if (!isset($response['success'])) {
            return $response; // Return as-is if not expected format
        }
        
        $sanitized = array(
            'success' => (bool) $response['success']
        );
        
        if (isset($response['data'])) {
            $data = $response['data'];
            
            $sanitized['data'] = array(
                'caller_domain' => sanitize_text_field($data['caller_domain'] ?? ''),
                'email' => sanitize_email($data['email'] ?? ''),
                'id' => sanitize_key($data['id'] ?? ''),
                'mark_index' => absint($data['mark_index'] ?? 0),
                'message' => wp_kses_post($data['message'] ?? ''),
                'state' => sanitize_text_field($data['state'] ?? ''),
                'subscription_external_id' => sanitize_key($data['subscription_external_id'] ?? ''),
                'timezone' => sanitize_text_field($data['timezone'] ?? ''),
                'caller' => is_array($data['caller'] ?? null) ? array_map('sanitize_text_field', $data['caller']) : array(),
                'transcription' => self::sanitize_transcription($data['transcription'] ?? array()),
                'pause_conversation' => (bool) ($data['pause_conversation'] ?? false),
                'product_description' => wp_kses_post($data['product_description'] ?? ''),
                'product_title' => sanitize_text_field($data['product_title'] ?? '')
            );
        }
        
        return (object) $sanitized; // Convert to object to match expected format
    }
    
    /**
     * Sanitizes the transcription array
     *
     * @param array $transcription Array of transcription entries
     * @return array Sanitized transcription data
     */
    private static function sanitize_transcription($transcription) {
        if (!is_array($transcription)) {
            return array();
        }
        
        return array_map(function($entry) {
            return array(
                'content' => wp_kses_post($entry['content'] ?? ''),
                'role' => sanitize_text_field($entry['role'] ?? '')
            );
        }, $transcription);
    }   
}
=== End of ./includes/class-h2-product-insight-sanitizer.php ===

=== File: ./includes/class-h2-product-insight-escaper.php ===

<?php
/**
 * Escaping Utility Class for H2 Product Insight
 *
 * @package    H2_Product_Insight
 * @subpackage Classes
 */

if (!defined('ABSPATH')) {
    exit;
}

class H2_Product_Insight_Escaper {

    /**
     * Escapes translatable string
     */
    public static function escape_translation($string) {
        return esc_html__($string, 'h2-product-insight');
    }
}
=== End of ./includes/class-h2-product-insight-escaper.php ===

=== File: ./includes/product-insight-renderer.php ===

<?php
/**
 * Renderer Class for H2 Product Insight
 *
 * @package    H2_Product_Insight
 * @author     Young Kwon
 * @copyright  Copyright (C) 2024, Young Kwon
 * @license    GPL-2.0-or-later
 * @link       https://2human.ai
 * @file       includes/product-insight-renderer.php
 */

// File: includes/product-insight-renderer.php

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

require_once plugin_dir_path(__FILE__) . './class-h2-product-insight-sanitizer.php';
require_once plugin_dir_path(__FILE__) . './class-h2-product-insight-escaper.php';

class H2_Product_Insight_Renderer {

    /**
     * Renders the chatbox based on the custom or default template.
     *
     * @return string The rendered chatbox HTML.
     */
    public static function render() {
        $options = get_option('h2_product_insight_options', array());
        $custom_css = isset($options['custom_css']) ? $options['custom_css'] : '';
        
        // Sanitize CSS before storing/processing
        $custom_css = H2_Product_Insight_Sanitizer::sanitize_custom_css($custom_css);

        $output = '';

        // Include custom CSS if provided
        if (!empty($custom_css)) {
            $output .= '<style>' . wp_strip_all_tags($custom_css) . '</style>';
        }

        $output .= self::render_default_template();

        return $output;
    }

    // Remove the render_custom_template method
    /*
    private static function render_custom_template($template) {
        // ...method code...
    }
    */

    /**
     * Renders the default chatbox template.
     *
     * @return string The default template HTML.
     */
    private static function render_default_template() {
        ob_start();
        ?>
        <div id="product-insight-aichatbox">
            <div id="product-insight-aiinput">
                <input type="text" 
                       id="product-insight-aiuser-input" 
                       placeholder="<?php echo H2_Product_Insight_Escaper::escape_translation('Ask about the product...'); ?>" 
                       aria-label="<?php echo H2_Product_Insight_Escaper::escape_translation('Chat Input'); ?>"
                       maxlength="1000"
                       pattern="[^<>]*"
                >
                <div id="product-insight-ailoading" style="display: none;">
                    <?php echo H2_Product_Insight_Escaper::escape_translation('Initializing...'); ?>
                </div>
            </div>
            <div id="product-insight-ailast-reply-container" style="display: none;"></div>
            <div id="product-insight-aimessages"></div>
        </div>
        <?php
        return ob_get_clean();
    }
    
}

=== End of ./includes/product-insight-renderer.php ===

=== File: ./includes/constants.php ===

<?php
/**
 * Constants for H2 Product Insight
 *
 * @package    H2_Product_Insight
 * @author     Young Kwon
 * @copyright  Copyright (C) 2024, Young Kwon
 * @license    GPL-2.0-or-later
 * @link       https://2human.ai
 * @file       includes/constants.php
 */

// file name: include/constants.php

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

define('H2_ACTIVATION_TEST', false);
define('H2_PRODUCT_INSIGHT_VERSION', '1.4');
define('H2_PRODUCT_INSIGHT_API_URL', 'https://2human.ai/wp-json/my-first-plugin/v1');
# define('H2_PRODUCT_INSIGHT_API_URL', 'https://talkee.ai/wp-json/my-first-plugin/v1');

define('H2_PRODUCT_INSIGHT_MAX_MESSAGE_LENGTH', 1000);
define('H2_PRODUCT_INSIGHT_MAX_QUERY_LENGTH', 2000);

define('H2_PRODUCT_INSIGHT_SECURITY_PATTERNS', array(
    '/<script\b[^>]*>(.*?)<\/script>/is', // Remove <script> tags
    '/<iframe\b[^>]*>(.*?)<\/iframe>/is', // Remove <iframe> tags
    '/on\w+\s*=\s*".*?"/is',             // Remove inline event handlers in double quotes
    "/on\w+\s*=\s*'.*?'/is",             // Remove inline event handlers in single quotes
    '/on\w+\s*=\s*\w+/is',               // Remove inline event handlers without quotes
));

define('H2_PRODUCT_INSIGHT_INVALID_INPUTS', array(
    '/<\?php/i',                         // PHP tags
    '/<\?=/i',                           // Short open tags
    '/\<\%.+?\%\>/s',                    // ASP-style tags
    '/(javascript|vbscript|data):/i',    // Potential XSS vectors
    '/&(#[xX]?)?(?:[0-9a-fA-F]+|\w+);/', // HTML entities
));


define('H2_PRODUCT_INSIGHT_ALLOWED_HTML_TAGS', array(
    // Text formatting
    'p'      => array(
        'class' => array(),
        'id'    => array(),
        'style' => array(),
    ),
    'span'   => array(
        'class' => array(),
        'id'    => array(),
        'style' => array(),
    ),
    'div'    => array(
        'class' => array(),
        'id'    => array(),
        'style' => array(),
    ),
    'strong' => array(),
    'b'      => array(),
    'em'     => array(),
    'i'      => array(),
    'u'      => array(),
    'strike' => array(),
    'del'    => array(),
    'sup'    => array(),
    'sub'    => array(),
    'mark'   => array(),
    
    // Links
    'a'      => array(
        'href'   => array(),
        'title'  => array(),
        'rel'    => array(),
        'class'  => array(),
        'id'     => array(),
        'target' => array(),
    ),
    
    // Lists
    'ul'     => array(
        'class' => array(),
        'id'    => array(),
        'style' => array(),
    ),
    'ol'     => array(
        'class' => array(),
        'id'    => array(),
        'style' => array(),
    ),
    'li'     => array(
        'class' => array(),
        'id'    => array(),
    ),
    'dl'     => array(),
    'dt'     => array(),
    'dd'     => array(),
    
    // Tables
    'table'  => array(
        'class'  => array(),
        'id'     => array(),
        'style'  => array(),
        'width'  => array(),
        'border' => array(),
    ),
    'thead'  => array(),
    'tbody'  => array(),
    'tfoot'  => array(),
    'tr'     => array(),
    'th'     => array(
        'scope'   => array(),
        'colspan' => array(),
        'rowspan' => array(),
    ),
    'td'     => array(
        'colspan' => array(),
        'rowspan' => array(),
    ),
    
    // Media
    'img'    => array(
        'src'     => array(),
        'alt'     => array(),
        'title'   => array(),
        'width'   => array(),
        'height'  => array(),
        'class'   => array(),
        'id'      => array(),
        'loading' => array(),
    ),
    'figure' => array(
        'class' => array(),
        'id'    => array(),
    ),
    'figcaption' => array(),
    
    // Semantic elements
    'article' => array(
        'class' => array(),
        'id'    => array(),
    ),
    'section' => array(
        'class' => array(),
        'id'    => array(),
    ),
    'aside'   => array(
        'class' => array(),
        'id'    => array(),
    ),
    'header'  => array(
        'class' => array(),
        'id'    => array(),
    ),
    'footer'  => array(
        'class' => array(),
        'id'    => array(),
    ),
    
    // Text structure
    'h1'      => array('class' => array(), 'id' => array()),
    'h2'      => array('class' => array(), 'id' => array()),
    'h3'      => array('class' => array(), 'id' => array()),
    'h4'      => array('class' => array(), 'id' => array()),
    'h5'      => array('class' => array(), 'id' => array()),
    'h6'      => array('class' => array(), 'id' => array()),
    'br'      => array(),
    'hr'      => array(),
    
    // Formatting
    'pre'     => array(),
    'code'    => array(),
    'blockquote' => array(
        'cite'  => array(),
        'class' => array(),
    ),
    
    // Forms (read-only/display)
    'button'  => array(
        'class'    => array(),
        'id'       => array(),
        'disabled' => array(),
        'type'     => array(),
    ),
    'label'   => array(
        'for'   => array(),
        'class' => array(),
    ),
));


// Strict tags for user inputs and sensitive contexts
define('H2_PRODUCT_INSIGHT_ALLOWED_TAGS_STRICT', array(
    'p'      => array(),
    'br'     => array(),
    'strong' => array(),
    'em'     => array(),
    'b'      => array(),
    'i'      => array(),
    'a'      => array(
        'href'   => array(),
        'title'  => array(),
        'rel'    => array(),
    ),
    'ul'     => array(),
    'ol'     => array(),
    'li'     => array(),
));
=== End of ./includes/constants.php ===

=== File: ./includes/class-h2-product-insight.php ===

<?php
/**
 * Main Class for H2 Product Insight
 *
 * @package    H2_Product_Insight
 * @author     Young Kwon
 * @copyright  Copyright (C) 2024, Young Kwon
 * @license    GPL-2.0-or-later
 * @link       https://2human.ai
 * @file      includes/class-h2-product-insight.php
 */

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

// Include only the necessary files
require_once plugin_dir_path(__FILE__) . './constants.php';
require_once plugin_dir_path(__FILE__) . './product-insight-settings.php';
require_once plugin_dir_path(__FILE__) . './product-insight-renderer.php';
require_once plugin_dir_path(__FILE__) . './class-h2-product-insight-sanitizer.php';
require_once plugin_dir_path(__FILE__) . './class-h2-product-insight-escaper.php';

/**
 * Main plugin class
 *
 * @package    H2_Product_Insight
 * @subpackage Classes
 * @since      1.0.0
 */
class H2_Product_Insight {

    private $settings;
    private $api_key;
    private $product_id; // Add this line to store product ID

    public function __construct() {
        // Settings class initialization
        $this->settings = new H2_Product_Insight_Settings();
        add_action('init', array($this, 'init'));

        // AJAX action hooks
        add_action('wp_ajax_send_product_insight_message', array($this, 'send_product_insight_message'));
        add_action('wp_ajax_nopriv_send_product_insight_message', array($this, 'send_product_insight_message'));
        add_action('wp_ajax_h2_product_insight_initial_call', array($this, 'handle_initial_call'));
        add_action('wp_ajax_nopriv_h2_product_insight_initial_call', array($this, 'handle_initial_call'));

        // Hook to display the chatbox
        add_action('init', array($this, 'add_chatbox_display_hook'));

        // Add shortcode registration
        add_shortcode('h2_product_insight', array($this, 'handle_shortcode'));

        // Remove the script enqueuing from the init method
        // add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
    }

    // Add this new method to handle shortcode
    public function handle_shortcode($atts) {
        $attributes = shortcode_atts(array(
            'product_id' => 0
        ), $atts);

        $this->product_id = absint($attributes['product_id']);

        // Enqueue scripts now that product_id is set
        $this->enqueue_scripts();

        return $this->render_chatbox();
    }

    public function init() {
        $options = get_option('h2_product_insight_options', array()); // Added default array value
        $this->api_key = isset($options['api_key']) ? sanitize_text_field($options['api_key']) : '';

        // Scripts will be enqueued when rendering the chatbox
    }

    public function enqueue_scripts() {
        // Enqueue the CSS and JS scripts
        wp_enqueue_style(
            'product-insight-style',
            plugin_dir_url(__FILE__) . '../css/product-insight-style.css',
            array(),
            H2_PRODUCT_INSIGHT_VERSION  // Updated to use constant
        );
        wp_enqueue_script(
            'h2-product-insight-script',
            plugin_dir_url(__FILE__) . '../js/h2-product-insight-script.js',
            array('jquery'),
            H2_PRODUCT_INSIGHT_VERSION,  // Updated to use constant
            true
        );
        wp_localize_script('h2-product-insight-script', 'h2_product_insight_ajax', array(
            'ajax_url'   => esc_url(admin_url('admin-ajax.php')),
            'api_key'    => esc_attr($this->api_key),
            'product_id' => absint($this->product_id ?: get_the_ID()),
            'nonce'      => wp_create_nonce('h2_product_insight_nonce') // Add this line
        ));
    }

    public function add_chatbox_display_hook() {
        $options   = get_option('h2_product_insight_options');
        $placement = isset($options['chatbox_placement']) ? $options['chatbox_placement'] : 'after_add_to_cart';

        switch ($placement) {
            case 'before_add_to_cart':
                add_action('woocommerce_before_add_to_cart_form', array($this, 'display_chatbox'));
                break;
            case 'after_product_summary':
                add_action('woocommerce_after_single_product_summary', array($this, 'display_chatbox'));
                break;
            case 'after_product_meta':
                add_action('woocommerce_product_meta_end', array($this, 'display_chatbox'));
                break;
            case 'after_single_product':
                add_action('woocommerce_after_single_product', array($this, 'display_chatbox'));
                break;
            case 'in_product_tabs':
                add_filter('woocommerce_product_tabs', array($this, 'add_product_insight_tab'));
                break;
            case 'after_add_to_cart':
            default:
                add_action('woocommerce_after_add_to_cart_form', array($this, 'display_chatbox'));
                break;
        }
    }

    public function display_chatbox() {
        // Modified to work for both WooCommerce and shortcode
        if (is_product() || $this->product_id) {
            $this->product_id = get_the_ID();
            // Enqueue scripts now that product_id is set
            $this->enqueue_scripts();
            echo wp_kses_post($this->render_chatbox());
        }
    }

    public function add_product_insight_tab($tabs) {
        $tabs['product_insight'] = array(
            'title'    => H2_Product_Insight_Escaper::escape_translation('Product Insight'),
            'priority' => 50,
            'callback' => array($this, 'display_chatbox')
        );
        return $tabs;
    }

    public function render_chatbox() {
        // Ensure product_id is set
        if (!$this->product_id && is_product()) {
            $this->product_id = get_the_ID();
        }
        // Scripts are already enqueued in the previous methods
        $html = H2_Product_Insight_Renderer::render();
        return wp_kses_post($html);
    }

    public function handle_initial_call() {
        // nonce check
        check_ajax_referer('h2_product_insight_nonce', 'nonce');

        // Validate and sanitize all POST data
        if (!isset($_POST['subscription_external_id'], $_POST['timeZone'])) {
            wp_send_json_error('Required fields are missing');
            return;
        }

        // Use the domain passed from JavaScript
        $caller_domain = isset($_POST['caller_domain']) ? sanitize_text_field(wp_unslash($_POST['caller_domain'])) : '';

        $initial_data = array(
            'subscription_external_id' => sanitize_text_field(wp_unslash($_POST['subscription_external_id'])),
            'timeZone'                => sanitize_text_field(wp_unslash($_POST['timeZone'])),
            'caller'                  => new stdClass(),
            'caller_domain'           => $caller_domain
        );

        // Validate and sanitize product ID
        $product_id = isset($_POST['product_id']) ? absint($_POST['product_id']) : 0;

        $product_description = '';
        $product_title = '';
        if ($product_id) {
            $product = wc_get_product($product_id);
            if ($product) {
                $product_title = $this->get_product_title($product);
                $product_description = $this->get_product_full_description($product);
            }
        }

        $response = $this->call_ai_api_initial($initial_data);

        if (is_wp_error($response)) {
            wp_send_json_error($response->get_error_message());
            return;
        }

        $raw_data = $response['body'];
        $ai_response = H2_Product_Insight_Sanitizer::sanitize_ai_response($raw_data);
        if (!$ai_response || !isset($ai_response->success) || $ai_response->success !== true) {
            $error_message = isset($ai_response->message) ? $ai_response->message : 'Unknown error occurred';
            wp_send_json_error($error_message);
            return;
        }

        // Ensure data object exists
        if (!isset($ai_response->data)) {
            $ai_response->data = new stdClass();
        }

        // Safely assign the properties
        $ai_response->data = (object) array_merge(
            (array) $ai_response->data,
            array(
                'product_title' => $product_title,
                'product_description' => $product_description
            )
        );

        wp_send_json_success($ai_response);
    }

    public function send_product_insight_message() {
        // Uncomment and fix nonce check
        check_ajax_referer('h2_product_insight_nonce', 'nonce');

        // Validate and sanitize message
        if (!isset($_POST['message'])) {
            wp_send_json_error('Message is required');
            return;
        }

        $user_message = sanitize_text_field(wp_unslash($_POST['message']));
        
        // Validate and sanitize data
        $initial_data = array();
        if (isset($_POST['data'])) {
            // First unslash the raw input, then sanitize
            $raw_data = wp_unslash($_POST['data']);

            $initial_data = H2_Product_Insight_Sanitizer::sanitize_ai_response($raw_data);
        }

        $response = $this->call_ai_api($user_message, $initial_data);

        if (is_wp_error($response)) {
            wp_send_json_error($response->get_error_message());
            return;
        }

        $raw_response = $response['body'];
        $ai_response = H2_Product_Insight_Sanitizer::sanitize_ai_response($raw_response);

        if (!$ai_response || !isset($ai_response->success) || $ai_response->success !== true) {
            $error_message = isset($ai_response->message) ? $ai_response->message : 'Unknown error occurred';
            wp_send_json_error($error_message);
            return;
        }

        wp_send_json_success($ai_response);
    }

    private function call_ai_api_initial($initial_data) {
        if (empty($this->api_key)) {
            return new WP_Error('api_error', 'API Key is not set. Please configure the plugin settings.');
        }

        $body = wp_json_encode($initial_data);

        return wp_remote_post(esc_url_raw(H2_PRODUCT_INSIGHT_API_URL . '/query'), array(
            'headers' => array(
                'Content-Type'  => 'application/json',
                'Authorization' => 'Bearer ' . sanitize_text_field($this->api_key)
            ),
            'body'    => $body,
            'timeout' => 15
        ));
    }

    private function call_ai_api($message, $initial_data) {
        if (empty($this->api_key)) {
            return new WP_Error('api_error', H2_Product_Insight_Escaper::escape_translation('API Key is not set.'));
        }

        $url = esc_url(H2_PRODUCT_INSIGHT_API_URL . '/query');
        if (empty($url)) {
            return new WP_Error('invalid_url', 'Invalid API URL');
        }

        $sanitized_data = array(
            'data'    => H2_Product_Insight_Sanitizer::sanitize_ai_response($initial_data),
            'message' => sanitize_text_field($message, true)
        );

        $response = wp_remote_post(esc_url($url), array(
            'headers' => array(
                'Content-Type'  => 'application/json',
                'Authorization' => 'Bearer ' . sanitize_text_field($this->api_key) // Changed
            ),
            'body'    => wp_json_encode($sanitized_data),
            'timeout' => 15
        ));

        return $response;
    }

    private function get_product_title($product) {
        return $product->get_name();
    }

    private function get_product_full_description($product) {
        $short_description = $product->get_short_description();
        $description = $product->get_description();
        $reviews = $this->get_product_reviews($product->get_id());
    
        $data1 = implode("\n", array_filter([$short_description, $description, $reviews]));
        return $data1;
    }

    private function get_product_reviews($product_id) {
        $args    = array(
            'post_id' => absint($product_id), // Added absint
            'status'  => 'approve',
            'number'  => min(50, absint(apply_filters('h2_product_insight_max_reviews', 50))), // Added limit
            'orderby' => 'date',
            'order'   => 'DESC',
        );
        $reviews = get_comments($args);
        $texts   = array();

        foreach ($reviews as $review) {
            $texts[] = esc_html($review->comment_content);
        }

        return implode("\n", $texts);
    }
}
=== End of ./includes/class-h2-product-insight.php ===

=== File: ./includes/product-insight-settings.php ===

<?php
/**
 * Settings for H2 Product Insight
 *
 * @package    H2_Product_Insight
 * @author     Young Kwon
 * @copyright  Copyright (C) 2024, Young Kwon
 * @license    GPL-2.0-or-later
 * @link       https://2human.ai
 * @file       includes/product-insight-settings.php
 */

 // File: includes/product-insight-settings.php

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

require_once plugin_dir_path(__FILE__) . './constants.php';
require_once plugin_dir_path(__FILE__) . './class-h2-product-insight-sanitizer.php';
require_once plugin_dir_path(__FILE__) . './class-h2-product-insight-escaper.php';

class H2_Product_Insight_Settings {
    private $options;
    private $invalid_fields = array();

    public function __construct() {
        add_action('admin_menu', array($this, 'add_admin_menu'));
        add_action('admin_init', array($this, 'init_settings'));

        // Retrieve invalid fields from the previous submission
        $this->invalid_fields = get_option('h2_product_insight_invalid_fields', array());

        // Enqueue the custom CSS and scripts for the settings page
        add_action('admin_enqueue_scripts', array($this, 'enqueue_admin_styles'));
        add_action('admin_enqueue_scripts', array($this, 'enqueue_admin_scripts'));

        // AJAX handler for activation
        add_action('wp_ajax_h2_activate_product_insight', array($this, 'handle_activate_product_insight'));
    }

    public function enqueue_admin_scripts($hook) {
        if ('settings_page_h2_product_insight' !== $hook) {
            return;
        }
        wp_enqueue_script('jquery');

        // Update version number to use constant
        wp_enqueue_script('h2_product_insight_admin_js', 
            plugins_url('../js/activation.js', __FILE__), 
            array('jquery'), 
            H2_PRODUCT_INSIGHT_VERSION, 
            true 
        );

        // Localize script to pass AJAX URL and nonce
        wp_localize_script('h2_product_insight_admin_js', 'h2_product_insight', array(
            'ajax_url' => esc_url(admin_url('admin-ajax.php')),
            'api_url'  => esc_url(H2_PRODUCT_INSIGHT_API_URL),
            'nonce'    => wp_create_nonce('h2_activate_product_insight_nonce')
        ));
    }

    /**
     * Enqueues custom admin styles.
     */
    public function enqueue_admin_styles($hook) {
        // Only enqueue on our settings page
        if ('settings_page_h2_product_insight' !== $hook) {
            return;
        }

        wp_enqueue_style(
            'h2_product_insight_admin_css', 
            plugins_url('../css/product-insight-style.css', __FILE__),
            array(),
            H2_PRODUCT_INSIGHT_VERSION
        );        
    }

    /**
     * Adds the settings page to the WordPress admin menu.
     */
    public function add_admin_menu() {
        add_options_page(
            H2_Product_Insight_Escaper::escape_translation('H2 Product Insight Settings'), 
            H2_Product_Insight_Escaper::escape_translation('H2 Product Insight'),         
            'manage_options',                                       
            'h2_product_insight',                                   
            array($this, 'render_settings_page')                   
        );
    }

    /**
     * Initializes the plugin settings.
     */
    public function init_settings() {
        register_setting('h2_product_insight_settings', 'h2_product_insight_options', array($this, 'sanitize'));

        add_settings_section(
            'h2_product_insight_general_section',
            H2_Product_Insight_Escaper::escape_translation('General Settings'),
            array($this, 'render_general_section'),
            'h2_product_insight_settings'
        );

        // API Key field
        add_settings_field(
            'api_key',
            H2_Product_Insight_Escaper::escape_translation('API Key'),
            array($this, 'render_api_key_field'),
            'h2_product_insight_settings',
            'h2_product_insight_general_section'
        );

        // Chatbox Placement field
        add_settings_field(
            'chatbox_placement',
            H2_Product_Insight_Escaper::escape_translation('Chatbox Placement'),
            array($this, 'render_chatbox_placement_field'),
            'h2_product_insight_settings',
            'h2_product_insight_general_section'
        );

        // Custom CSS field
        add_settings_field(
            'custom_css',
            H2_Product_Insight_Escaper::escape_translation('Custom CSS'),
            array($this, 'render_custom_css_field'),
            'h2_product_insight_settings',
            'h2_product_insight_general_section'
        );
    }

    public function sanitize($input) {
        if (!is_array($input)) {
            return array();
        }

        $sanitized_input = array();
        $this->invalid_fields = array(); 
        $existing_options = get_option('h2_product_insight_options', array());

        // Sanitize API Key
        if (isset($input['api_key']) && !empty($input['api_key'])) {
            $sanitized_input['api_key'] = sanitize_text_field($input['api_key']);
        } else {
            $this->invalid_fields[] = 'api_key';
            add_settings_error(
                'h2_product_insight_settings',
                'invalid_api_key',
                H2_Product_Insight_Escaper::escape_translation('API Key is required. Previous key retained.'),
                'error'
            );
            $sanitized_input['api_key'] = isset($existing_options['api_key']) ? $existing_options['api_key'] : '';
        }

        // If any required fields are missing, retain existing values and stop validation
        if (!empty($this->invalid_fields)) {
            update_option('h2_product_insight_invalid_fields', $this->invalid_fields);
            return array_merge($existing_options, $sanitized_input);
        }

        // Use direct concatenation for API endpoints
        $response = wp_remote_post(H2_PRODUCT_INSIGHT_API_URL . '/validate-api-key', array(
            'headers' => array('Content-Type' => 'application/json'),
            'body'    => wp_json_encode(array('api_key' => $sanitized_input['api_key'])),
            'timeout' => 15,
        ));

        if (is_wp_error($response)) {
            $this->invalid_fields = array_merge($this->invalid_fields, array('api_key'));
            add_settings_error(
                'h2_product_insight_settings',
                'api_request_failed',
                sprintf(
                    /* translators: %s is the error message returned by the API. */
                    H2_Product_Insight_Escaper::escape_translation('API validation request failed: %s. Previous values retained.'),
                    $response->get_error_message()
                ),
                'error'
            );
            // Revert to existing values for API Key
            $sanitized_input['api_key'] = $existing_options['api_key'];
        } else {
            $response_code = wp_remote_retrieve_response_code($response);
            $response_body = wp_remote_retrieve_body($response);
            $result = json_decode($response_body, true);

            if ($response_code !== 200 || empty($result['success'])) {
                $this->invalid_fields = array_merge($this->invalid_fields, array('api_key'));
                $message = !empty($result['message']) 
                ? sanitize_text_field($result['message'])
                : sanitize_text_field(H2_Product_Insight_Escaper::escape_translation('API validation failed. Previous values retained.'));            
                add_settings_error(
                    'h2_product_insight_settings',
                    'api_validation_failed',
                    $message,
                    'error'
                );
                // Revert to existing values for API URL and Key
                $sanitized_input['api_key'] = $existing_options['api_key'];
            } else {
                // Validation succeeded - add success message
                add_settings_error(
                    'h2_product_insight_settings',
                    'api_validation_success',
                    H2_Product_Insight_Escaper::escape_translation('API connection validated successfully.'),
                    'success'
                );
            }
        }

        // Sanitize optional fields

        // Sanitize custom CSS using dedicated sanitizer
        if (isset($input['custom_css'])) {
            $sanitized_input['custom_css'] = H2_Product_Insight_Sanitizer::sanitize_custom_css($input['custom_css']);
        } else {
            $sanitized_input['custom_css'] = isset($existing_options['custom_css']) 
                ? $existing_options['custom_css'] 
                : '';
        }

        // Sanitize Chatbox Placement
        if (isset($input['chatbox_placement'])) {
            $sanitized_input['chatbox_placement'] = sanitize_text_field($input['chatbox_placement']);
        } else {
            $sanitized_input['chatbox_placement'] = isset($existing_options['chatbox_placement']) 
                ? $existing_options['chatbox_placement'] 
                : 'after_add_to_cart';
        }

        // Update invalid fields option for styling
        update_option('h2_product_insight_invalid_fields', $this->invalid_fields);

        // Return merged array to preserve any existing options not included in current update
        return array_merge($existing_options, $sanitized_input);
    }
    
    /**
     * Renders the settings page.
     */
    public function render_settings_page() {
        // Missing default value for get_option
        $this->options = get_option('h2_product_insight_options', array());
        ?>
        <div class="h2-wrap">
            <h1><?php echo esc_html(get_admin_page_title()); ?></h1>
            <p><a href="<?php echo esc_url('https://2human.ai/product-insight'); ?>" target="_blank"><?php echo H2_Product_Insight_Escaper::escape_translation('PRODUCT INSIGHT AI HOME'); ?></a></p>
            
            <?php if (H2_ACTIVATION_TEST || empty($this->options['api_key'])) : ?>
                <form id="h2_activate_product_insight" method="post">
                    <?php wp_nonce_field('h2_activate_product_insight_nonce', 'nonce'); ?>
                    <button type="button" class="button button-primary" id="h2_activate_button"><?php echo H2_Product_Insight_Escaper::escape_translation('Activate Product Insight AI'); ?></button>
                </form>
                <div id="h2_activation_message"></div>
            <?php else : ?>
                <form action="<?php echo esc_url(admin_url('options.php')); ?>" method="post">
                <?php
                    settings_fields('h2_product_insight_settings');
                    do_settings_sections('h2_product_insight_settings');
                    submit_button();
                ?>
                </form>
            <?php endif; ?>
        </div>
        <?php
        // Display settings errors
        settings_errors('h2_product_insight_settings');

        // Delete invalid fields option after rendering
        delete_option('h2_product_insight_invalid_fields');
    }

    /**
     * Renders the general settings section.
     */
    public function render_general_section() {
        echo '<p>' . H2_Product_Insight_Escaper::escape_translation('Configure the settings for the H2 Product Insight plugin.') . '</p>';
    }

    public function render_api_key_field() {
        $value = isset($this->options['api_key']) ? $this->options['api_key'] : '';
        $error_class = in_array('api_key', $this->invalid_fields) ? 'has-error' : '';
        
        // Use printf to output the div with escaped class attribute
        printf(
            '<div class="h2-input-wrapper %s">',
            esc_attr($error_class)
        );
        
        // Use printf to output the input field with escaped attributes
        printf(
            '<input type="text" id="api_key" name="h2_product_insight_options[api_key]" value="%s" class="regular-text">',
            esc_attr($value)
        );
        
        echo '<span class="h2-error-indicator"></span>';
        echo '</div>';
    }
    
    
    /**
     * Renders the Chatbox Placement field.
     */
    public function render_chatbox_placement_field() {
        $value = isset($this->options['chatbox_placement']) ? $this->options['chatbox_placement'] : 'after_add_to_cart';
        
        $options = array(
            // Before product
            'before_single_product' => H2_Product_Insight_Escaper::escape_translation('Before Single Product'),
            
            // Title area
            'before_title' => H2_Product_Insight_Escaper::escape_translation('Before Product Title'),
            'after_title' => H2_Product_Insight_Escaper::escape_translation('After Product Title'),
            
            // Price area
            'before_price' => H2_Product_Insight_Escaper::escape_translation('Before Price'),
            'after_price' => H2_Product_Insight_Escaper::escape_translation('After Price'),
            
            // Short description area
            'before_excerpt' => H2_Product_Insight_Escaper::escape_translation('Before Short Description'),
            'after_excerpt' => H2_Product_Insight_Escaper::escape_translation('After Short Description'),
            
            // Add to cart area
            'before_add_to_cart' => H2_Product_Insight_Escaper::escape_translation('Before Add to Cart Button'),
            'after_add_to_cart' => H2_Product_Insight_Escaper::escape_translation('After Add to Cart Button'),
            
            // Product meta
            'before_product_meta' => H2_Product_Insight_Escaper::escape_translation('Before Product Meta'),
            'after_product_meta' => H2_Product_Insight_Escaper::escape_translation('After Product Meta'),
            
            // Product summary
            'before_product_summary' => H2_Product_Insight_Escaper::escape_translation('Before Product Summary'),
            'after_product_summary' => H2_Product_Insight_Escaper::escape_translation('After Product Summary'),
            
            // Tabs area
            'before_tabs' => H2_Product_Insight_Escaper::escape_translation('Before Tabs'),
            'in_product_tabs' => H2_Product_Insight_Escaper::escape_translation('In Product Tabs'),
            'after_tabs' => H2_Product_Insight_Escaper::escape_translation('After Tabs'),
            
            // Related products
            'before_related_products' => H2_Product_Insight_Escaper::escape_translation('Before Related Products'),
            'after_related_products' => H2_Product_Insight_Escaper::escape_translation('After Related Products'),
            
            // End of product
            'after_single_product' => H2_Product_Insight_Escaper::escape_translation('After Single Product'),
            
            // Sidebar options
            'product_sidebar' => H2_Product_Insight_Escaper::escape_translation('In Product Sidebar')
        );
        
        echo '<select id="chatbox_placement" name="h2_product_insight_options[chatbox_placement]">';
        foreach ($options as $key => $label) {
            printf(
                '<option value="%s" %s>%s</option>',
                esc_attr($key),
                selected($value, $key, false),
                esc_html($label)
            );
        }
        echo '</select>';
        
        echo '<p class="description">' . H2_Product_Insight_Escaper::escape_translation('Select where to display the chatbox on product pages') . '</p>';
    }

    /**
     * Renders the Custom CSS field.
     */
    public function render_custom_css_field() {
        $value = isset($this->options['custom_css']) ? $this->options['custom_css'] : '';
        printf(
            '<textarea id="custom_css" name="h2_product_insight_options[custom_css]" rows="10" cols="50" class="large-text code">%s</textarea>',
            esc_textarea($value)
        );
        echo '<p class="description">' . H2_Product_Insight_Escaper::escape_translation('Enter any custom CSS to style the chatbox.') . '</p>';
    }




    /**
     * Handles the activation of Product Insight AI via AJAX.
     */
    public function handle_activate_product_insight() {
        check_ajax_referer('h2_activate_product_insight_nonce', 'nonce');

        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => H2_Product_Insight_Escaper::escape_translation('Permission denied.')));
            return;
        }

        $api_url = esc_url_raw(H2_PRODUCT_INSIGHT_API_URL . '/new-registration');
        if (empty($api_url)) {
            wp_send_json_error(array('message' => H2_Product_Insight_Escaper::escape_translation('Invalid API URL.')));
            return;
        }

        $response = wp_remote_post($api_url, array(
            'headers' => array('Content-Type' => 'application/json'),
            'body'    => wp_json_encode(array('api_key' => '')),
            'timeout' => 15,
        ));

        if (is_wp_error($response)) {
            wp_send_json_error(array('message' => $response->get_error_message()));
            return;
        }

        $response_code = wp_remote_retrieve_response_code($response);
        $response_body = wp_remote_retrieve_body($response);
        $result = json_decode($response_body, true);

        if ($response_code !== 200 || empty($result['api_key'])) {
            $error_message = isset($result['message']) ? $result['message'] : H2_Product_Insight_Escaper::escape_translation('API activation failed.');
            wp_send_json_error(array('message' => $error_message));
            return;
        }

        // Create options array directly (bypass sanitize for initial activation)
        $options = array(
            'api_key' => sanitize_text_field($result['api_key']),
            'custom_template' => '',
            'custom_css' => '',
            'chatbox_placement' => 'after_add_to_cart'
        );

        // Delete existing option first
        delete_option('h2_product_insight_options');
        
        // Add new option
        $update_success = add_option('h2_product_insight_options', $options);
        
        if (!$update_success) {
            // If add_option failed, try update_option
            $update_success = update_option('h2_product_insight_options', $options, false);
        }

        if ($update_success && isset($options['api_key']) && !empty($options['api_key'])) {
            wp_send_json_success(array(
                'message' => H2_Product_Insight_Escaper::escape_translation('Product Insight AI activated successfully!'),
                'api_key' => $options['api_key']
            ));
        } else {
            wp_send_json_error(array('message' => H2_Product_Insight_Escaper::escape_translation('Failed to save API key.')));
        }
    }    


}

=== End of ./includes/product-insight-settings.php ===

